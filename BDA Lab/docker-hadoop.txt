Step 1: Set Up Hadoop in Docker
Assuming you have Hadoop running in Docker, open a terminal (cmd or PowerShell) and enter:

sh
Copy
Edit
docker exec -it namenode bash
This will log you into the Hadoop Namenode container.

Check that Hadoop is working:

sh
Copy
Edit
hdfs dfs -ls /
If Hadoop is running, it will list directories in HDFS.

ðŸ“Œ Step 2: Create Input Files and Upload to HDFS
(a) Create input text files
Inside the Docker container, create sample documents:

sh
Copy
Edit
echo "hadoop mapreduce tutorial" > doc1.txt
echo "hadoop tutorial example" > doc2.txt
echo "mapreduce example tutorial" > doc3.txt
(b) Upload files to HDFS
sh
Copy
Edit
hdfs dfs -mkdir /techcore
hdfs dfs -put doc*.txt /techcore/
Verify that files are uploaded:

sh
Copy
Edit
hdfs dfs -ls /techcore
hdfs dfs -cat /techcore/doc*.txt
ðŸ“Œ Step 3: Write the Inverted Index Program
Inside Docker, create a Java file:

sh
Copy
Edit
echo 'import java.io.IOException;
import java.util.StringTokenizer;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class InvertedIndex {

    public static class TokenizerMapper extends Mapper<LongWritable, Text, Text, Text> {
        private Text word = new Text();
        private Text fileName = new Text();

        @Override
        protected void setup(Context context) throws IOException, InterruptedException {
            String filePath = ((org.apache.hadoop.mapreduce.lib.input.FileSplit) context.getInputSplit()).getPath().getName();
            fileName.set(filePath);
        }

        public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
            StringTokenizer itr = new StringTokenizer(value.toString());
            while (itr.hasMoreTokens()) {
                word.set(itr.nextToken().toLowerCase());
                context.write(word, fileName);
            }
        }
    }

    public static class IndexReducer extends Reducer<Text, Text, Text, Text> {
        public void reduce(Text key, Iterable<Text> values, Context context) throws IOException, InterruptedException {
            StringBuilder fileList = new StringBuilder();
            for (Text file : values) {
                if (fileList.length() > 0) {
                    fileList.append(", ");
                }
                fileList.append(file.toString());
            }
            context.write(key, new Text(fileList.toString()));
        }
    }

    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "Inverted Index");
        job.setJarByClass(InvertedIndex.class);
        job.setMapperClass(TokenizerMapper.class);
        job.setReducerClass(IndexReducer.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(Text.class);
        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));
        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}' > InvertedIndex.java
ðŸ“Œ Step 4: Compile the Java Code
Run the following commands inside Docker:

sh
Copy
Edit
javac -classpath $(hadoop classpath) -d . InvertedIndex.java
jar cf invertedindex.jar InvertedIndex*.class
ðŸ“Œ Step 5: Run the MapReduce Job
Execute the Hadoop job:

sh
Copy
Edit
hadoop jar invertedindex.jar InvertedIndex /techcore /techcore/output
ðŸ“Œ Step 6: Verify Output
List the output directory:

sh
Copy
Edit
hdfs dfs -ls /techcore/output
Check the results:

sh
Copy
Edit
hdfs dfs -cat /techcore/output/part-r-00000
You should see an inverted index output like this:

nginx
Copy
Edit
example    doc2.txt, doc3.txt
hadoop     doc1.txt, doc2.txt
mapreduce  doc1.txt, doc3.txt
tutorial   doc1.txt, doc2.txt, doc3.txt